request = require "request"
cheerio = require "cheerio"
async = require "async"
extend = require "extend"
config = require "./config"

request.debug = true

# headers
headers =
  "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
  # "accept-encoding": "gzip,deflate,sdch"
  "accept-language": "en-US,en;q=0.8,it;q=0.6"
  "cache-control": "no-cache"
  "pragma": "no-cache"
  "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_0) AppleWebKit/537.36 (KHTML, like Gecko)Chrome/31.0.1650.57 Safari/537.36"


# cookie jar
jar = request.jar()

jar.setCookie request.cookie("showmoreinfo=true"), config.url
jar.setCookie request.cookie("is_logged_in=1"), config.url
jar.setCookie request.cookie("ck_mig=1"), config.url


# helpers
call = (data, cb) ->
  request
    method: data.method or "GET"
    uri: "#{config.url}/#{data.path}"
    qs: data.qs
    headers: headers
    jar: jar
  , (error, response, body) ->
    if error? or response.statusCode isnt 200
      return cb error or
        response: response
        body: body

    $ = cheerio.load body
    cb null, $

callPages = (data, cb) ->
  call data, (error, $) =>
    return cb error  if error?

    async.concat [1..(parseInt($(".navspan").first().children(".navlinknum").last().text(), 10) - 1)].map((page) -> "#{data.path}/#{page}"), (path, callback) =>
      data.path = path
      call data, callback
    , (error, $$) ->
      cb error, $$

callPageSequence = (data, cb) ->
  $$ = []
  $more = null
  data.qs.page = 1

  async.doWhilst (callback) ->
    call data, (error, $) =>
      return callback error  if error?

      data.qs.page = data.qs.page + 1
      $more = $("#search_morelink")

      $$.push $

      callback null
  , ->
    $more?.length
  , (error) ->
    cb error, $$


# model
class Model
  constructor: (options) ->
    jar.setCookie request.cookie("user_login_value=#{options.token}"), config.url
    jar.setCookie request.cookie("ulv=#{options.token}"), config.url

  user: (username, cb) ->
    call path: "~#{username}", cb

  releases: (data, cb) ->
    callPages
      path: do ->
        path = "collection/#{data.username}/"

        # ratings
        return "#{path}r#{data.min.toFixed(1)}-#{data.max.toFixed(1)}"  if data.min and data.max

        # tags
        return "#{path}/stag/#{data.tag}/"  if data.tag

        # collection
        "#{path}oo"
    , cb

  release: (data, cb) ->
    data.type ?= "album"

    call path: "release/#{data.type}/#{data.artist}/#{data.name}", cb

  reviews: (data, cb) ->
    callPages path: "collection/#{data.username}/reviews", cb

  whishlist: (data, cb) ->
    callPages path: "collection/#{data.username}/whishlist", cb

  friends: (data, cb) ->
    call path: "friends/#{data.username}", cb

  lists: (data, cb) ->
    call path: "list/#{data.username}", cb

  list: (data, cb) ->
    call path: "list/", cb

  search: (data, cb) ->
    types =
      artist: "a"
      release: "l"
      varelease: "y"
      label: "y"
      catalogn: "j"
      classical: "r"
      review: "v"
      genre: "g"

    callPageSequence
      path: "httprequest"
      qs:
        action: "Search"
        type: types[data.type]
        searchterm: data.query
    , cb


module.exports = Model
