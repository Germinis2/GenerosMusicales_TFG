querystring = require "querystring"
config = require "./config"
Model = require "./model"


# helpers
getId = (tag) ->
  parseInt tag.replace(/^\D+/g, ""), 10  if tag

getFieldMap = (identity, data) ->
  config.fields[identity].reduce (current, field, index) ->
    current[field] = not data.fields or (data.fields and field in data.fields)
    current
  , {}

createResponse = (data) ->
  meta:
    itemCount: if Array.isArray data then data.length else 1
  data: data

createRelease = ($item, $) ->
  $release = $item.find(".album")
  $artist = $item.find(".artist")
  $label = $item.find(".label")

  item =
    id: getId $release.attr "title"
    name: $release.text()
    uri: config.url + $item.find(".album").attr("href")
    image: $item.children(".or_q_small_album").find("img").attr("src")
    artistId: getId $artist.attr "title"
    artistName: $artist.text()
    artistUri: config.url + $artist.attr("href")
    genres: $item.find(".genre").map( ->
      $this = $(this)

      id: getId $this.attr "title"
      name: $this.text()
      uri: $this.attr "href"
    ).get()
    tags: $item.find(".or_q_tagcloud").children("a").map( ->
      $this = $(this)

      id: getId $this.attr "title"
      name: $this.text()
      uri: config.url + $this.attr "href"
    ).get()
    ownership: $item.children(".or_q_ownership").text()
    rating: parseFloat($item.children(".or_q_rating_date_s").children("img").attr("title")?.replace(" stars", ""), 10) or null

  console.log $label.length

  if $label.length
    item.labelId = getId $label.attr "title"
    item.labelName = $label.text()
    item.labelUri = $label.attr "href"

  item


# rateyourmusic
class RateYourMusic
  constructor: (options) ->
    @model = new Model options

  user: (data, cb) ->
    @model.user data.username, (error, $) ->
      return cb error  if error?

      user = {}
      fields = getFieldMap "user", data

      # id
      if fields.id
        user.id = parseInt $(".profile_header").text().split("#")[1], 10

      # name
      if fields.name
        user.name = $("#profilename").text()

      # age, gender, location, email
      if fields.age or fields.gender or fields.location or fields.email
        $info = $(".profilehii").children(".mbgen").first().find("td")
        $first = $info.eq(0)
        isFirstAgeGender = not $first.children().length

        if (fields.age or fields.gender) and isFirstAgeGender
          agegender = $first.text().split(" / ")
          user.age = agegender[0]  if fields.age
          user.gender = agegender[1]  if fields.gender

        if fields.location
          user.location = (if not isFirstAgeGender then $first else $info.eq(1)).children("a").text()

        if fields.email
          user.email = $info.eq(2).text().replace("(remove_this)", "").replace("[remove_this_also]", "") or null

      # release count
      if fields.releaseCount
        user.releaseCount = parseInt $("#musicownership").find("tr").eq(0).find("a").text().replace(",", ""), 10

      # tags
      if fields.tags
        user.tags = []
        $("#musictag").children("a").each ->
          $this = $(this)

          user.tags.push
            name: $this.text()
            uri: config.url + $this.attr("href")
            total: $this.next().text().replace(/\(|\)/g, "")

      # friend count
      if fields.friendCount
        user.friendCount = $("#btnftabfriends").text().split("friends ")[1].replace /\[|\]/g, ""

      cb null, user

  releases: (data, cb) ->
    @model.releases data, (error, $$) ->
      return cb error  if error?

      # items
      items = []
      $$.forEach ($) ->
        $(".mbgen tr").each (i) ->
          return true  if i is 0

          items.push createRelease $(this), $

      cb null, createResponse items

  # TODO: finish
  release: (data, cb) ->
    @model.release data, (error, $) ->
      return cb error  if error?

      $release = $(".album_title")
      $info = $(".album_info").children "tr"
      $artist = $info.eq(0).find ".artist"
      $rating = $info.eq(3)
      $ranking = $info.eq(4)

      release =
        id: getId $release.children(".album_shortcut").val()
        name: $release.text().trim()
        artistId: getId $artist.attr "title"
        artistName: $artist.text()
        artistUri: config.url + $artist.attr "href"
        genres: $info.filter(".release_genres").children("td").find(".genre").map( ->
          $this = $(this)

          id: getId $this.attr "title"
          name: $this.text()
          uri: $this.attr "href"
        ).get()
        image: $(".coverart_img").attr "src"
        released: $info.eq(2).children("td").text()
        averageRating: parseFloat $rating.children("td").find(".avg_rating").text(), 10
        ratingCount: parseInt $rating.children("td").find(".ratingCount").text(), 10
        yearlyRank: parseInt $ranking.children("td").children("b").eq(0).text(), 10
        overallRank: parseInt $ranking.children("td").children("b").eq(1).text(), 10
        # label: $('.label').text(),
        # labelUri: $('.label').attr('href')

      cb null, createResponse release

  ratings: (data, cb) ->
    data.min ?= 0.5
    data.max ?= 5.0

    @releases data, cb

  reviews: (data, cb) ->
    @model.reviews data, (error, $$) ->
      return cb error  if error?

      # items
      items = []
      $$.forEach ($) ->
        $(".mbgen tr").each (i) ->
          return true  if i is 0

          $this = $(this)

          if i % 2 is 0
            items[items.length - 1].review = $this.find(".or_q_review").text().trim()
          else
            items.push createRelease $this, $

      cb null, createResponse items

  wishlist: (data, cb) ->
    @model.whishlist data, (error, $$) ->
      return cb error  if error?

      # items
      items = []
      $$.forEach ($) ->
        $(".mbgen tr").each (i) ->
          return true  if i is 0

          items.push createRelease $(this), $

      cb null, createResponse items

  tags: (data, cb) ->
    data.fields = ["tags"]

    @user data, (error, data) ->
      return cb error  if error?

      cb null, data.tags

  taggedReleases: (data, cb) ->
    return cb "No tags specified."  unless data.tag

    @releases data, (error, data) ->
      return cb error  if error?

      cb null, data

  friends: (data, cb) ->
    @model.friends data, (error, $) ->
      return cb error  if error?

      # items
      items = []
      $(".or_card_frame").each ->
        $this = $(this)

        items.push
          username: $this.find(".card_link").children().text()
          uri: config.url + $this.find(".card_link").children().attr("href")
          image: $this.find("img").attr("src") or null

      cb null, createResponse items

  lists: (data, cb) ->
    @model.lists data, (error, $) ->
      return cb error  if error?

      items = []
      $(".mbgen tr").each (i) ->
        return true  if i is 0

        $this = $(this)
        $name = $this.find(".listpage_list")
        metadata = $this.children().last().children().last().text().split(" | ")

        items.push
          name: $name.text()
          description: $this.find("blockquote").text() or null
          uri: config.url + $name.attr("href")
          items: parseInt metadata[2].replace(" items", ""), 10
          image: $this.children().first().find("img").attr("src")
          created: metadata[0].replace("Created: ", "").split("/").reverse().join("/")
          updated: metadata[1].replace("Updated: ", "").split("/").reverse().join("/")
          public: querystring.parse($this.children().first().children("a").attr("href").split("?")[1]).public is "f"

      cb null, createResponse items

  list: (data, cb) ->
    @model.list data, (error, $) ->
      return cb error  if error?

      list =
        name: "Test"
        items: []

      $("user_list tr").each (i) ->
        $this = $(this)

        list.items.push
          name: $this.find(".list_album").text()

      cb null, createResponse list

  search: (data, cb) ->
    @model.search data, (error, $$) ->
      return cb error  if error?

      items = []
      $$.forEach ($) ->
        $(".infobox").each ->
          $release = $(this).find(".searchpage")

          items.push
            id: getId $release.attr "title"
            name: $release.text()
            uri: config.url + $release.attr "href"

      cb null, createResponse items

  charts: (data, cb) ->


module.exports = RateYourMusic
