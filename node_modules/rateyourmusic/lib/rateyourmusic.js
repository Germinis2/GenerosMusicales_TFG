// Generated by CoffeeScript 1.8.0
var Model, RateYourMusic, config, createRelease, createResponse, getFieldMap, getId, querystring,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

querystring = require("querystring");

config = require("./config");

Model = require("./model");

getId = function(tag) {
  if (tag) {
    return parseInt(tag.replace(/^\D+/g, ""), 10);
  }
};

getFieldMap = function(identity, data) {
  return config.fields[identity].reduce(function(current, field, index) {
    current[field] = !data.fields || (data.fields && __indexOf.call(data.fields, field) >= 0);
    return current;
  }, {});
};

createResponse = function(data) {
  return {
    meta: {
      itemCount: Array.isArray(data) ? data.length : 1
    },
    data: data
  };
};

createRelease = function($item, $) {
  var $artist, $label, $release, item, _ref;
  $release = $item.find(".album");
  $artist = $item.find(".artist");
  $label = $item.find(".label");
  item = {
    id: getId($release.attr("title")),
    name: $release.text(),
    uri: config.url + $item.find(".album").attr("href"),
    image: $item.children(".or_q_small_album").find("img").attr("src"),
    artistId: getId($artist.attr("title")),
    artistName: $artist.text(),
    artistUri: config.url + $artist.attr("href"),
    genres: $item.find(".genre").map(function() {
      var $this;
      $this = $(this);
      return {
        id: getId($this.attr("title")),
        name: $this.text(),
        uri: $this.attr("href")
      };
    }).get(),
    tags: $item.find(".or_q_tagcloud").children("a").map(function() {
      var $this;
      $this = $(this);
      return {
        id: getId($this.attr("title")),
        name: $this.text(),
        uri: config.url + $this.attr("href")
      };
    }).get(),
    ownership: $item.children(".or_q_ownership").text(),
    rating: parseFloat((_ref = $item.children(".or_q_rating_date_s").children("img").attr("title")) != null ? _ref.replace(" stars", "") : void 0, 10) || null
  };
  console.log($label.length);
  if ($label.length) {
    item.labelId = getId($label.attr("title"));
    item.labelName = $label.text();
    item.labelUri = $label.attr("href");
  }
  return item;
};

RateYourMusic = (function() {
  function RateYourMusic(options) {
    this.model = new Model(options);
  }

  RateYourMusic.prototype.user = function(data, cb) {
    return this.model.user(data.username, function(error, $) {
      var $first, $info, agegender, fields, isFirstAgeGender, user;
      if (error != null) {
        return cb(error);
      }
      user = {};
      fields = getFieldMap("user", data);
      if (fields.id) {
        user.id = parseInt($(".profile_header").text().split("#")[1], 10);
      }
      if (fields.name) {
        user.name = $("#profilename").text();
      }
      if (fields.age || fields.gender || fields.location || fields.email) {
        $info = $(".profilehii").children(".mbgen").first().find("td");
        $first = $info.eq(0);
        isFirstAgeGender = !$first.children().length;
        if ((fields.age || fields.gender) && isFirstAgeGender) {
          agegender = $first.text().split(" / ");
          if (fields.age) {
            user.age = agegender[0];
          }
          if (fields.gender) {
            user.gender = agegender[1];
          }
        }
        if (fields.location) {
          user.location = (!isFirstAgeGender ? $first : $info.eq(1)).children("a").text();
        }
        if (fields.email) {
          user.email = $info.eq(2).text().replace("(remove_this)", "").replace("[remove_this_also]", "") || null;
        }
      }
      if (fields.releaseCount) {
        user.releaseCount = parseInt($("#musicownership").find("tr").eq(0).find("a").text().replace(",", ""), 10);
      }
      if (fields.tags) {
        user.tags = [];
        $("#musictag").children("a").each(function() {
          var $this;
          $this = $(this);
          return user.tags.push({
            name: $this.text(),
            uri: config.url + $this.attr("href"),
            total: $this.next().text().replace(/\(|\)/g, "")
          });
        });
      }
      if (fields.friendCount) {
        user.friendCount = $("#btnftabfriends").text().split("friends ")[1].replace(/\[|\]/g, "");
      }
      return cb(null, user);
    });
  };

  RateYourMusic.prototype.releases = function(data, cb) {
    return this.model.releases(data, function(error, $$) {
      var items;
      if (error != null) {
        return cb(error);
      }
      items = [];
      $$.forEach(function($) {
        return $(".mbgen tr").each(function(i) {
          if (i === 0) {
            return true;
          }
          return items.push(createRelease($(this), $));
        });
      });
      return cb(null, createResponse(items));
    });
  };

  RateYourMusic.prototype.release = function(data, cb) {
    return this.model.release(data, function(error, $) {
      var $artist, $info, $ranking, $rating, $release, release;
      if (error != null) {
        return cb(error);
      }
      $release = $(".album_title");
      $info = $(".album_info").children("tr");
      $artist = $info.eq(0).find(".artist");
      $rating = $info.eq(3);
      $ranking = $info.eq(4);
      release = {
        id: getId($release.children(".album_shortcut").val()),
        name: $release.text().trim(),
        artistId: getId($artist.attr("title")),
        artistName: $artist.text(),
        artistUri: config.url + $artist.attr("href"),
        genres: $info.filter(".release_genres").children("td").find(".genre").map(function() {
          var $this;
          $this = $(this);
          return {
            id: getId($this.attr("title")),
            name: $this.text(),
            uri: $this.attr("href")
          };
        }).get(),
        image: $(".coverart_img").attr("src"),
        released: $info.eq(2).children("td").text(),
        averageRating: parseFloat($rating.children("td").find(".avg_rating").text(), 10),
        ratingCount: parseInt($rating.children("td").find(".ratingCount").text(), 10),
        yearlyRank: parseInt($ranking.children("td").children("b").eq(0).text(), 10),
        overallRank: parseInt($ranking.children("td").children("b").eq(1).text(), 10)
      };
      return cb(null, createResponse(release));
    });
  };

  RateYourMusic.prototype.ratings = function(data, cb) {
    if (data.min == null) {
      data.min = 0.5;
    }
    if (data.max == null) {
      data.max = 5.0;
    }
    return this.releases(data, cb);
  };

  RateYourMusic.prototype.reviews = function(data, cb) {
    return this.model.reviews(data, function(error, $$) {
      var items;
      if (error != null) {
        return cb(error);
      }
      items = [];
      $$.forEach(function($) {
        return $(".mbgen tr").each(function(i) {
          var $this;
          if (i === 0) {
            return true;
          }
          $this = $(this);
          if (i % 2 === 0) {
            return items[items.length - 1].review = $this.find(".or_q_review").text().trim();
          } else {
            return items.push(createRelease($this, $));
          }
        });
      });
      return cb(null, createResponse(items));
    });
  };

  RateYourMusic.prototype.wishlist = function(data, cb) {
    return this.model.whishlist(data, function(error, $$) {
      var items;
      if (error != null) {
        return cb(error);
      }
      items = [];
      $$.forEach(function($) {
        return $(".mbgen tr").each(function(i) {
          if (i === 0) {
            return true;
          }
          return items.push(createRelease($(this), $));
        });
      });
      return cb(null, createResponse(items));
    });
  };

  RateYourMusic.prototype.tags = function(data, cb) {
    data.fields = ["tags"];
    return this.user(data, function(error, data) {
      if (error != null) {
        return cb(error);
      }
      return cb(null, data.tags);
    });
  };

  RateYourMusic.prototype.taggedReleases = function(data, cb) {
    if (!data.tag) {
      return cb("No tags specified.");
    }
    return this.releases(data, function(error, data) {
      if (error != null) {
        return cb(error);
      }
      return cb(null, data);
    });
  };

  RateYourMusic.prototype.friends = function(data, cb) {
    return this.model.friends(data, function(error, $) {
      var items;
      if (error != null) {
        return cb(error);
      }
      items = [];
      $(".or_card_frame").each(function() {
        var $this;
        $this = $(this);
        return items.push({
          username: $this.find(".card_link").children().text(),
          uri: config.url + $this.find(".card_link").children().attr("href"),
          image: $this.find("img").attr("src") || null
        });
      });
      return cb(null, createResponse(items));
    });
  };

  RateYourMusic.prototype.lists = function(data, cb) {
    return this.model.lists(data, function(error, $) {
      var items;
      if (error != null) {
        return cb(error);
      }
      items = [];
      $(".mbgen tr").each(function(i) {
        var $name, $this, metadata;
        if (i === 0) {
          return true;
        }
        $this = $(this);
        $name = $this.find(".listpage_list");
        metadata = $this.children().last().children().last().text().split(" | ");
        return items.push({
          name: $name.text(),
          description: $this.find("blockquote").text() || null,
          uri: config.url + $name.attr("href"),
          items: parseInt(metadata[2].replace(" items", ""), 10),
          image: $this.children().first().find("img").attr("src"),
          created: metadata[0].replace("Created: ", "").split("/").reverse().join("/"),
          updated: metadata[1].replace("Updated: ", "").split("/").reverse().join("/"),
          "public": querystring.parse($this.children().first().children("a").attr("href").split("?")[1])["public"] === "f"
        });
      });
      return cb(null, createResponse(items));
    });
  };

  RateYourMusic.prototype.list = function(data, cb) {
    return this.model.list(data, function(error, $) {
      var list;
      if (error != null) {
        return cb(error);
      }
      list = {
        name: "Test",
        items: []
      };
      $("user_list tr").each(function(i) {
        var $this;
        $this = $(this);
        return list.items.push({
          name: $this.find(".list_album").text()
        });
      });
      return cb(null, createResponse(list));
    });
  };

  RateYourMusic.prototype.search = function(data, cb) {
    return this.model.search(data, function(error, $$) {
      var items;
      if (error != null) {
        return cb(error);
      }
      items = [];
      $$.forEach(function($) {
        return $(".infobox").each(function() {
          var $release;
          $release = $(this).find(".searchpage");
          return items.push({
            id: getId($release.attr("title")),
            name: $release.text(),
            uri: config.url + $release.attr("href")
          });
        });
      });
      return cb(null, createResponse(items));
    });
  };

  RateYourMusic.prototype.charts = function(data, cb) {};

  return RateYourMusic;

})();

module.exports = RateYourMusic;
