// Generated by CoffeeScript 1.8.0
var Model, async, call, callPageSequence, callPages, cheerio, config, extend, headers, jar, request;

request = require("request");

cheerio = require("cheerio");

async = require("async");

extend = require("extend");

config = require("./config");

request.debug = true;

headers = {
  "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
  "accept-language": "en-US,en;q=0.8,it;q=0.6",
  "cache-control": "no-cache",
  "pragma": "no-cache",
  "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_0) AppleWebKit/537.36 (KHTML, like Gecko)Chrome/31.0.1650.57 Safari/537.36"
};

jar = request.jar();

jar.setCookie(request.cookie("showmoreinfo=true"), config.url);

jar.setCookie(request.cookie("is_logged_in=1"), config.url);

jar.setCookie(request.cookie("ck_mig=1"), config.url);

call = function(data, cb) {
  return request({
    method: data.method || "GET",
    uri: "" + config.url + "/" + data.path,
    qs: data.qs,
    headers: headers,
    jar: jar
  }, function(error, response, body) {
    var $;
    if ((error != null) || response.statusCode !== 200) {
      return cb(error || {
        response: response,
        body: body
      });
    }
    $ = cheerio.load(body);
    return cb(null, $);
  });
};

callPages = function(data, cb) {
  return call(data, (function(_this) {
    return function(error, $) {
      var _i, _ref, _results;
      if (error != null) {
        return cb(error);
      }
      return async.concat((function() {
        _results = [];
        for (var _i = 1, _ref = parseInt($(".navspan").first().children(".navlinknum").last().text(), 10) - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(page) {
        return "" + data.path + "/" + page;
      }), function(path, callback) {
        data.path = path;
        return call(data, callback);
      }, function(error, $$) {
        return cb(error, $$);
      });
    };
  })(this));
};

callPageSequence = function(data, cb) {
  var $$, $more;
  $$ = [];
  $more = null;
  data.qs.page = 1;
  return async.doWhilst(function(callback) {
    return call(data, (function(_this) {
      return function(error, $) {
        if (error != null) {
          return callback(error);
        }
        data.qs.page = data.qs.page + 1;
        $more = $("#search_morelink");
        $$.push($);
        return callback(null);
      };
    })(this));
  }, function() {
    return $more != null ? $more.length : void 0;
  }, function(error) {
    return cb(error, $$);
  });
};

Model = (function() {
  function Model(options) {
    jar.setCookie(request.cookie("user_login_value=" + options.token), config.url);
    jar.setCookie(request.cookie("ulv=" + options.token), config.url);
  }

  Model.prototype.user = function(username, cb) {
    return call({
      path: "~" + username
    }, cb);
  };

  Model.prototype.releases = function(data, cb) {
    return callPages({
      path: (function() {
        var path;
        path = "collection/" + data.username + "/";
        if (data.min && data.max) {
          return "" + path + "r" + (data.min.toFixed(1)) + "-" + (data.max.toFixed(1));
        }
        if (data.tag) {
          return "" + path + "/stag/" + data.tag + "/";
        }
        return "" + path + "oo";
      })()
    }, cb);
  };

  Model.prototype.release = function(data, cb) {
    if (data.type == null) {
      data.type = "album";
    }
    return call({
      path: "release/" + data.type + "/" + data.artist + "/" + data.name
    }, cb);
  };

  Model.prototype.reviews = function(data, cb) {
    return callPages({
      path: "collection/" + data.username + "/reviews"
    }, cb);
  };

  Model.prototype.whishlist = function(data, cb) {
    return callPages({
      path: "collection/" + data.username + "/whishlist"
    }, cb);
  };

  Model.prototype.friends = function(data, cb) {
    return call({
      path: "friends/" + data.username
    }, cb);
  };

  Model.prototype.lists = function(data, cb) {
    return call({
      path: "list/" + data.username
    }, cb);
  };

  Model.prototype.list = function(data, cb) {
    return call({
      path: "list/"
    }, cb);
  };

  Model.prototype.search = function(data, cb) {
    var types;
    types = {
      artist: "a",
      release: "l",
      varelease: "y",
      label: "y",
      catalogn: "j",
      classical: "r",
      review: "v",
      genre: "g"
    };
    return callPageSequence({
      path: "httprequest",
      qs: {
        action: "Search",
        type: types[data.type],
        searchterm: data.query
      }
    }, cb);
  };

  return Model;

})();

module.exports = Model;
